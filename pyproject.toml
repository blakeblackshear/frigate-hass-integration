[tool.black]
target-version = ["py38"]
exclude = 'generated'

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
force_sort_within_sections = true
known_first_party = [
    "custom_components.frigate",
    "homeassistant",
    "tests",
]
forced_separate = [
    "tests",
]
combine_as_imports = true
default_section = "THIRDPARTY"

[tool.pylint.MASTER]
ignore = [
    "tests",
]
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
jobs = 2
load-plugins = [
    "pylint.extensions.typing",
    "pylint_strict_informational",
    "pylint_pytest",
]
persistent = false
extension-pkg-whitelist = [
    "ciso8601",
    "cv2",
]

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
    "_",
    "ev",
    "ex",
    "fp",
    "i",
    "id",
    "j",
    "k",
    "Run",
    "T",
]

[tool.pylint."MESSAGES CONTROL"]
# Reasons disabled:
# format - handled by black
# locally-disabled - it spams too much
# duplicate-code - unavoidable
# cyclic-import - doesn't test if both import on load
# unused-argument - generic callbacks and setup methods create a lot of warnings
# too-many-* - are not enforced for the sake of readability
# too-few-* - same as too-many-*
# abstract-method - with intro of async there are always methods missing
# inconsistent-return-statements - doesn't handle raise
# too-many-ancestors - it's too strict.
# wrong-import-order - isort guards this
disable = [
    "format",
    "abstract-method",
    "cyclic-import",
    "duplicate-code",
    "inconsistent-return-statements",
    "locally-disabled",
    "not-context-manager",
    "too-few-public-methods",
    "too-many-ancestors",
    "too-many-arguments",
    "too-many-branches",
    "too-many-instance-attributes",
    "too-many-lines",
    "too-many-locals",
    "too-many-public-methods",
    "too-many-return-statements",
    "too-many-statements",
    "too-many-boolean-expressions",
    "unused-argument",
    "wrong-import-order",
]
enable = [
    #"useless-suppression",  # temporarily every now and then to clean them up
    "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.TYPECHECK]
ignored-classes = [
    "_CountingAttr",  # for attrs
]

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
    "BaseException",
    "Exception",
    "HomeAssistantError",
]

[tool.pylint.TYPING]
py-version = "3.8"
runtime-typing = false

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = [
    "tests",
]
norecursedirs = [
    ".git",
    "testing_config",
]
filterwarnings = [
    # Can be removed after there is a new pytest-cov release with
    # https://github.com/pytest-dev/pytest-cov/issues/561 .
    "ignore:.*hookimpl CovPlugin.*old-style configuration options.*:pytest.PytestDeprecationWarning",

    # Can be removed once we can update to pytest-asyncio==0.20.3 (which in
    # turn requires a release of pytest-homeassistant-custom-component >
    # 0.12.49)
    "ignore:.*There is no current event loop.*:DeprecationWarning"
]
addopts = "--timeout=10 --cov-report=xml:coverage.xml --cov-report=term-missing --cov=custom_components.frigate --cov-fail-under=100"

[tool.mypy]
# Stock HomeAssistant mypy configuration.
ignore_missing_imports = true
python_version = "3.8"
follow_imports = "silent"
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true

# Custom Frigate configuration.
show_error_codes = true
